{
    // Place your workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "return if not server": {
        "scope": "javascript,typescript",
        "prefix": "ifnotserver",
        "body": ["if (!IsServer()) return;"],
        "description": "fast type of if not is server"
    },
    "get special value": {
        "scope": "javascript,typescript",
        "prefix": "letspecialvalue",
        "body": ["let $1 = ability.GetSpecialValueFor('$2')", "$3"],
        "description": "fast type of if not is server"
    },
    "get caster": {
        "scope": "javascript,typescript",
        "prefix": "letcaster",
        "body": ["let caster = this.GetCaster()"],
        "description": "fast type of if not is server"
    },
    "get ability": {
        "scope": "javascript,typescript",
        "prefix": "letability",
        "body": ["let ability = this.GetAbility();"],
        "description": "fast type of if not is server"
    },
    "get parent": {
        "scope": "javascript,typescript",
        "prefix": "letparent",
        "body": ["let parent = this.GetParent();"],
        "description": "fast type of if not is server"
    },
    "rootForReactPanorama": {
        "prefix": "root",
        "body": [
            "<root>",
            "\t<styles>",
            "\t\t<include src=\"./styles.less\" />",
            "\t</styles>",
            "\t<scripts>",
            "\t\t<include src=\"./scripts.tsx\" />",
            "\t</scripts>",
            "\t<Panel />",
            "</root>"
        ],
        "description": "create a root element"
    }
}
