// 汇总Server端的监听事件,自定义类game\scripts\src\utils\eventmanager.ts

"Event_Roll", (event: {
            bIgnore: 0 | 1
            nNum1: number
            nNum2: number
            playerID: PlayerID
        })

"Event_ChangeGold_Atk", (event: {
            nGold: number
            player: Player
        })

"Event_PlayerDie", { player: Player }

"Event_UpdateRound", { isBegin: boolean, nRound: number }       

"Event_BuyState", { nCount: nCount, typeState: typeState, player: this }

"Event_GameStart"

"Event_PlayerRoundBefore", { typeGameState : GS_Begin }

"Event_FinalBattle"

"Event_PlayerRoundFinished", this

"Event_SxChange", { entity: CDOTA_BaseNPC_Hero, bonus_mana: number }

"Event_BZLevelUp", { eBZ: eBZ, nLevel: nLevel }

"Event_PlayerRoundBegin", { oPlayer: oPlayer, bRoll: true }

"Event_GSWait_Over"

"Event_LeavePath", { player: this, path: this.m_pathMoveStart }

"Event_PassingPath",(event:{path:Path,entity:CDOTA_BaseNPC})

"Event_OnPath", { path: this,entity: player.m_eHero }

"Event_RollBaoZiJudge", { player: event.player }

"Event_HeroManaChange", { player : Player, oAblt? : CDOTABaseAbility }

"Event_OnDamage",  {
        entindex_attacker_const: EntityIndex;
        entindex_victim_const: EntityIndex;
        entindex_inflictor_const?: EntityIndex;
        damagetype_const: DamageTypes;
        damage: number;
        bIgnore?: boolean;
    }

"Event_HeroHuiMoByRound", event: { oPlayer: Player, nHuiMo: number }

"Event_BZHuiMo", event: {
                    eBz: CDOTA_BaseNPC_BZ,
                    nHuiMoSum: number,
                    getBaseHuiMo: Function
                }

"Event_RootedDisable", { player: this }

"Event_BZCanAtk", { entity: v }

"Event_BZCantAtk", { entity: v }

"Event_PlayerPass", { player: this }

"Event_PlayerPassEnd", { player: this }

"Event_PlayerInvis", { player: this }

"Event_PlayerInvisEnd", { player: this }

"Event_LastCDChange", {
                    strAbltName: string,
                    entity: CDOTA_BaseNPC_Hero,
                    nCD: number
                }

"Event_BZDestroy", { entity: eBZ }

"Event_BZLevel", { eBZNew: eBZNew, eBZ: eBZ }

"Event_Move", { entity: CDOTA_BaseNPC_Hero }

"Event_MoveEnd", { entity: CDOTA_BaseNPC_Hero }

"Event_BZCreate", { entity: eBZ }

"Event_BZCastAblt", {ablt: this, bIgnore: true}

"Event_CurPathChange", { player: Player }

"Event_PathOwnChange", {
            path: this,
            nOwnerIDLast: nOwnerIDLast
        }

"Event_PathBuffDel", { oPlayer: oPlayer, path: this, sBuffName: strBuffName }

"Event_GCLD", {
            entity: oPlayer.m_eHero,
            path: this
        }

"Event_ActionStop", { 
            entity: CDOTA_BaseNPC,
            bMoveBack?: boolean
        }

"Event_GCLDEnd", {
            entity: oPlayer.m_eHero,
            path: this,
            bWin: bWin,
            bSwap: true
        }

"Event_PlayerMoveEnd", { player: Player }

"dota_player_used_ability", { caster_entindex: EntityIndex, abilityname: string }

"Event_LastCDChange", {
                                    strAbltName: event.abilityname,
                                    entity: entity,
                                    nCD: 0
                                }

"Event_GCLDReady", {
    entity: CDOTA_BaseNPC_Hero,
    path: PathDomain,
    bIgnore: boolean,
}

"Event_Atk", {
        entindex_attacker_const: EntityIndex;
        entindex_victim_const: EntityIndex;
        entindex_inflictor_const?: EntityIndex;
        damagetype_const: DamageTypes;
        damage: number;
        bIgnore?: boolean;
    }